// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Getter is an autogenerated mock type for the Getter type
type Getter struct {
	mock.Mock
}

type Getter_Expecter struct {
	mock *mock.Mock
}

func (_m *Getter) EXPECT() *Getter_Expecter {
	return &Getter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: k
func (_m *Getter) Get(k string) interface{} {
	ret := _m.Called(k)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Getter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Getter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - k string
func (_e *Getter_Expecter) Get(k interface{}) *Getter_Get_Call {
	return &Getter_Get_Call{Call: _e.mock.On("Get", k)}
}

func (_c *Getter_Get_Call) Run(run func(k string)) *Getter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Getter_Get_Call) Return(_a0 interface{}) *Getter_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetBool provides a mock function with given fields: k
func (_m *Getter) GetBool(k string) bool {
	ret := _m.Called(k)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Getter_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type Getter_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - k string
func (_e *Getter_Expecter) GetBool(k interface{}) *Getter_GetBool_Call {
	return &Getter_GetBool_Call{Call: _e.mock.On("GetBool", k)}
}

func (_c *Getter_GetBool_Call) Run(run func(k string)) *Getter_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Getter_GetBool_Call) Return(_a0 bool) *Getter_GetBool_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetFloat64 provides a mock function with given fields: k
func (_m *Getter) GetFloat64(k string) float64 {
	ret := _m.Called(k)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Getter_GetFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFloat64'
type Getter_GetFloat64_Call struct {
	*mock.Call
}

// GetFloat64 is a helper method to define mock.On call
//   - k string
func (_e *Getter_Expecter) GetFloat64(k interface{}) *Getter_GetFloat64_Call {
	return &Getter_GetFloat64_Call{Call: _e.mock.On("GetFloat64", k)}
}

func (_c *Getter_GetFloat64_Call) Run(run func(k string)) *Getter_GetFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Getter_GetFloat64_Call) Return(_a0 float64) *Getter_GetFloat64_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetInt provides a mock function with given fields: k
func (_m *Getter) GetInt(k string) int {
	ret := _m.Called(k)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Getter_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type Getter_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - k string
func (_e *Getter_Expecter) GetInt(k interface{}) *Getter_GetInt_Call {
	return &Getter_GetInt_Call{Call: _e.mock.On("GetInt", k)}
}

func (_c *Getter_GetInt_Call) Run(run func(k string)) *Getter_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Getter_GetInt_Call) Return(_a0 int) *Getter_GetInt_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetString provides a mock function with given fields: k
func (_m *Getter) GetString(k string) string {
	ret := _m.Called(k)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Getter_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type Getter_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - k string
func (_e *Getter_Expecter) GetString(k interface{}) *Getter_GetString_Call {
	return &Getter_GetString_Call{Call: _e.mock.On("GetString", k)}
}

func (_c *Getter_GetString_Call) Run(run func(k string)) *Getter_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Getter_GetString_Call) Return(_a0 string) *Getter_GetString_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetStringMap provides a mock function with given fields: k
func (_m *Getter) GetStringMap(k string) map[string]interface{} {
	ret := _m.Called(k)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Getter_GetStringMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMap'
type Getter_GetStringMap_Call struct {
	*mock.Call
}

// GetStringMap is a helper method to define mock.On call
//   - k string
func (_e *Getter_Expecter) GetStringMap(k interface{}) *Getter_GetStringMap_Call {
	return &Getter_GetStringMap_Call{Call: _e.mock.On("GetStringMap", k)}
}

func (_c *Getter_GetStringMap_Call) Run(run func(k string)) *Getter_GetStringMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Getter_GetStringMap_Call) Return(_a0 map[string]interface{}) *Getter_GetStringMap_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetStringMapString provides a mock function with given fields: k
func (_m *Getter) GetStringMapString(k string) map[string]string {
	ret := _m.Called(k)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Getter_GetStringMapString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMapString'
type Getter_GetStringMapString_Call struct {
	*mock.Call
}

// GetStringMapString is a helper method to define mock.On call
//   - k string
func (_e *Getter_Expecter) GetStringMapString(k interface{}) *Getter_GetStringMapString_Call {
	return &Getter_GetStringMapString_Call{Call: _e.mock.On("GetStringMapString", k)}
}

func (_c *Getter_GetStringMapString_Call) Run(run func(k string)) *Getter_GetStringMapString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Getter_GetStringMapString_Call) Return(_a0 map[string]string) *Getter_GetStringMapString_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetStringSlice provides a mock function with given fields: k
func (_m *Getter) GetStringSlice(k string) []string {
	ret := _m.Called(k)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Getter_GetStringSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringSlice'
type Getter_GetStringSlice_Call struct {
	*mock.Call
}

// GetStringSlice is a helper method to define mock.On call
//   - k string
func (_e *Getter_Expecter) GetStringSlice(k interface{}) *Getter_GetStringSlice_Call {
	return &Getter_GetStringSlice_Call{Call: _e.mock.On("GetStringSlice", k)}
}

func (_c *Getter_GetStringSlice_Call) Run(run func(k string)) *Getter_GetStringSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Getter_GetStringSlice_Call) Return(_a0 []string) *Getter_GetStringSlice_Call {
	_c.Call.Return(_a0)
	return _c
}

// Unmarshal provides a mock function with given fields: rawVal
func (_m *Getter) Unmarshal(rawVal interface{}) error {
	ret := _m.Called(rawVal)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(rawVal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Getter_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type Getter_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - rawVal interface{}
func (_e *Getter_Expecter) Unmarshal(rawVal interface{}) *Getter_Unmarshal_Call {
	return &Getter_Unmarshal_Call{Call: _e.mock.On("Unmarshal", rawVal)}
}

func (_c *Getter_Unmarshal_Call) Run(run func(rawVal interface{})) *Getter_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Getter_Unmarshal_Call) Return(_a0 error) *Getter_Unmarshal_Call {
	_c.Call.Return(_a0)
	return _c
}

type NewGetterT interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetter creates a new instance of Getter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetter(t NewGetterT) *Getter {
	mock := &Getter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
